name: Release Android SDK to Maven Central

env:
  CI: false
  CD: true

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'SDK version to release (e.g., 0.3.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run? true or false'
        required: false
        default: 'true'
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Validate version format
        run: |
          echo "Checking version format..."
          if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "ERROR: Version must match format X.Y.Z (e.g., 1.2.3)"
            exit 1
          fi

      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      - name: Build and run tests
        run: ./gradlew :sdk:clean :sdk:build :sdk:test

      - name: Publish to Maven Central
        run: ./gradlew publishAllPublicationsToMavenCentralRepository -PSDK_VERSION=${{ github.event.inputs.version }}
        env:
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEYID }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEYPASSWORD }}
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.ORG_GRADLE_PROJECT_MAVENCENTRALUSERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.ORG_GRADLE_PROJECT_MAVENCENTRALPASSWORD }}

      - name: Tag the release
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --tags
          git tag v${{ github.event.inputs.version }}
          git push origin v${{ github.event.inputs.version }}
          
      - name: Generate Changelog
        id: changelog
        run: |
          set +x
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found; using full history"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog since $PREVIOUS_TAG"
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
            
          FEATURES=$(echo "$CHANGELOG" | grep -i "feat\|feature" || echo "")
          FIXES=$(echo "$CHANGELOG" | grep -i "fix\|bug" || echo "")
          IMPROVEMENTS=$(echo "$CHANGELOG" | grep -i "improve\|enhance\|refactor\|perf" || echo "")
          OTHERS=$(echo "$CHANGELOG" | grep -v -i "feat\|feature\|add\|fix\|bug\|issue\|improve\|enhance\|refactor\|perf" || echo "")
            
          {
            echo "changelog<<CHANGELOG_EOF"
            echo "## What's Changed in v${{ steps.version.outputs.new_version }}"
            echo ""
            
            if [ -n "$FEATURES" ]; then
              echo "### New Features"
              echo "$FEATURES"
              echo ""
            fi
            
            if [ -n "$FIXES" ]; then
              echo "### Bug Fixes"
              echo "$FIXES"
              echo ""
            fi
            
            if [ -n "$IMPROVEMENTS" ]; then
              echo "### Improvements"
              echo "$IMPROVEMENTS"
              echo ""
            fi
            
            if [ -n "$OTHERS" ]; then
              echo "### Other Changes"
              echo "$OTHERS"
              echo ""
            fi
            
            echo "CHANGELOG_EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ github.event.inputs.version }}"
          name: "Release v${{ github.event.inputs.version }}"
          body_path: CHANGELOG.txt
          draft: ${{ github.event.inputs.dry_run }}